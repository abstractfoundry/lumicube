===================================
Pre-defined variables and functions
===================================

black   = 0x000000
grey    = 0x808080
white   = 0xFFFFFF
red     = 0xFF0000
orange  = 0xFF8C00
yellow  = 0xFFFF00
green   = 0x00FF00
cyan    = 0x00FFFF
blue    = 0x0000FF
magenta = 0xFF00FF
pink    = 0xFF007F
purple  = 0x800080

hsv_colour(hue, saturation, value)
random_colour()
noise_2d(x, y)
noise_3d(x, y, z)
noise_4d(x, y, z, w)
run_async(task, *args, **kwargs)
LumiCube(ip_address)


========================
Default imported modules
========================

import time
import math
import random


===========
LED display
===========

display.brightness  # 0 - 100

display.set_all(colour)
display.set_led(x, y, colour)
display.set_leds(x_y_to_colour_dict)  # { (x1, y1): colour1, (x2, y2): colour2, ... }
display.set_panel(panel, 2d_colour_list)  # 2d_colour_list is a list of 8 lists, each containing 8 colours
display.scroll_text(text, colour=white, background_colour=black, speed=1)
display.set_3d(x_y_z_to_colour_dict)  # { (x1, y1, z1): colour1, (x2, y2, z2): colour2, ... }

3D coordinate system (looking at the 3 LED panels, the origin is at the back corner of the cube):

             y
             |
             |
          _-` `-_
     z _-`       `-_ x

- The left panel is described by:  x, y when z = 8
- The right panel is described by: y, z when x = 8
- The top panel is described by:   x, z when y = 8
- Coordinates outside this range will be ignored


==========
Microphone
==========

microphone.enable  # 0 or 1

microphone.start_recording(file)
microphone.stop_recording()
microphone.start_voice_recognition()
microphone.wait_for_sentence(timeout) # Returns the sentence spoken as a string
microphone.stop_voice_recognition()
microphone.start_recording_for_frequency_analysis()
microphone.get_frequency_buckets(num_buckets=8, min_hz=0, max_hz=4000)


=======
Speaker
=======

speaker.volume  # 0 - 200

speaker.play(path)
speaker.stop()
speaker.say(text)
speaker.tone(frequency=261.626, duration=0.5, amplitude=0.25, function=sine_wave)


======
Screen
======

screen.set_pixel(x, y, colour)
screen.set_pixels(x, y, width, height, pixels)
screen.draw_rectangle(x, y, width, height, colour)
screen.write_text(x, y, text, size, colour, background_colour)
screen.draw_image(path, x, y, width, height)


=======
Buttons
=======

buttons.top_pressed
buttons.middle_pressed
buttons.bottom_pressed
buttons.top_pressed_count
buttons.middle_pressed_count
buttons.bottom_pressed_count

buttons.get_next_action(timeout)  # Returns either 'top', 'middle', or 'bottom'


============
Light sensor
============

buttons.get_next_gesture(timeout)  # Returns either 'up', 'down', 'left' or 'right'

light_sensor.ambient_light
light_sensor.red
light_sensor.green
light_sensor.blue
light_sensor.last_gesture
light_sensor.num_gestures
light_sensor.within_proximity
light_sensor.num_times_within_proximity


========================
Orientation sensor (IMU)
========================

imu.pitch
imu.roll
imu.yaw
imu.acceleration_x
imu.acceleration_y
imu.acceleration_z
imu.angular_velocity_x
imu.angular_velocity_y
imu.angular_velocity_z
imu.gravity_x
imu.gravity_y
imu.gravity_z


==================
Environment sensor
==================

env_sensor.temperature
env_sensor.pressure
env_sensor.humidity


============
Raspberry Pi
============

pi.ip_address()
pi.cpu_temp()
pi.cpu_percent()
pi.ram_percent_used()
pi.disk_percent()


========================
Using multiple LumiCubes
========================

Technically the objects above are also available on an object called "cube", so:

display.set_led(0, 0, red)

is the same as:

cube.display.set_led(0, 0, red)

If you want to interact with a different LumiCube, create another cube object using the IP address of the other cube.
You can then access all the fields and methods of the remote cube in the same way:

cube2 = Cube("192.168.0.14")
cube2.display.set_led(0, 0, red)

Note: It will be communicating over a WiFi network, so the responsiveness will depend on your network speed and reliability.
